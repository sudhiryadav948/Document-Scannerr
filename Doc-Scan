<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Document Scanner - Scan, Save & Organize Documents</title>
    <meta name="description" content="Free online document scanner with OCR, PDF generation, and cloud storage. Scan documents with your camera or upload images to create digital copies.">
    <meta name="keywords" content="document scanner, PDF scanner, OCR scanner, mobile scanner, scan documents, digitize documents">
    <!-- Google Adsense -->
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4111440258134064" crossorigin="anonymous"></script>
    <!-- AdMob -->
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4111440258134064" crossorigin="anonymous"></script>
    <style>
        :root {
            --primary-color: #4f46e5;
            --secondary-color: #f9fafb;
            --dark-color: #1f2937;
            --light-color: #ffffff;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--secondary-color);
            color: var(--dark-color);
            transition: var(--transition);
            min-height: 100vh;
        }

        body.dark-mode {
            background-color: #111827;
            color: var(--secondary-color);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #e5e7eb;
            margin-bottom: 20px;
        }

        body.dark-mode header {
            border-bottom-color: #374151;
        }

        .logo {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .logo i {
            font-size: 28px;
        }

        .theme-toggle {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 24px;
            color: var(--dark-color);
            transition: var(--transition);
        }

        body.dark-mode .theme-toggle {
            color: var(--secondary-color);
        }

        .main-content {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 20px;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
        }

        .sidebar {
            background-color: var(--light-color);
            border-radius: var(--border-radius);
            padding: 20px;
            box-shadow: var(--box-shadow);
            height: fit-content;
        }

        body.dark-mode .sidebar {
            background-color: #1f2937;
        }

        .sidebar-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .sidebar-menu {
            list-style: none;
        }

        .sidebar-menu li {
            margin-bottom: 10px;
        }

        .sidebar-menu button {
            width: 100%;
            padding: 10px 15px;
            border: none;
            border-radius: var(--border-radius);
            background-color: transparent;
            color: var(--dark-color);
            text-align: left;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: var(--transition);
        }

        body.dark-mode .sidebar-menu button {
            color: var(--secondary-color);
        }

        .sidebar-menu button:hover, .sidebar-menu button.active {
            background-color: rgba(79, 70, 229, 0.1);
            color: var(--primary-color);
        }

        body.dark-mode .sidebar-menu button:hover, 
        body.dark-mode .sidebar-menu button.active {
            background-color: rgba(79, 70, 229, 0.2);
        }

        .sidebar-menu button i {
            font-size: 18px;
        }

        .scanner-container {
            background-color: var(--light-color);
            border-radius: var(--border-radius);
            padding: 20px;
            box-shadow: var(--box-shadow);
            margin-bottom: 20px;
        }

        body.dark-mode .scanner-container {
            background-color: #1f2937;
        }

        .scanner-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .scanner-title {
            font-size: 20px;
            font-weight: 600;
        }

        .scanner-actions {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: var(--border-radius);
            background-color: var(--primary-color);
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: var(--transition);
        }

        .btn:hover {
            opacity: 0.9;
        }

        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--primary-color);
            color: var(--primary-color);
        }

        body.dark-mode .btn-outline {
            color: var(--secondary-color);
            border-color: var(--secondary-color);
        }

        .btn-success {
            background-color: var(--success-color);
        }

        .btn-warning {
            background-color: var(--warning-color);
        }

        .btn-danger {
            background-color: var(--danger-color);
        }

        .video-container {
            position: relative;
            width: 100%;
            height: 400px;
            background-color: #000;
            border-radius: var(--border-radius);
            overflow: hidden;
            margin-bottom: 20px;
        }

        #scanner-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .canvas-container {
            position: relative;
            width: 100%;
            height: 400px;
            background-color: #f3f4f6;
            border-radius: var(--border-radius);
            overflow: hidden;
            margin-bottom: 20px;
            display: none;
        }

        body.dark-mode .canvas-container {
            background-color: #374151;
        }

        #scanner-canvas {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .corner {
            position: absolute;
            width: 20px;
            height: 20px;
            border: 2px solid var(--primary-color);
            z-index: 10;
            display: none;
        }

        .corner:nth-child(1) {
            top: 0;
            left: 0;
            border-right: none;
            border-bottom: none;
        }

        .corner:nth-child(2) {
            top: 0;
            right: 0;
            border-left: none;
            border-bottom: none;
        }

        .corner:nth-child(3) {
            bottom: 0;
            left: 0;
            border-right: none;
            border-top: none;
        }

        .corner:nth-child(4) {
            bottom: 0;
            right: 0;
            border-left: none;
            border-top: none;
        }

        .document-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .document-polygon {
            fill: rgba(0, 0, 0, 0.5);
            stroke: var(--primary-color);
            stroke-width: 2;
            stroke-dasharray: 5;
        }

        .controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .control-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .control-label {
            font-size: 14px;
            font-weight: 500;
        }

        .control-input {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: var(--border-radius);
            background-color: var(--light-color);
            color: var(--dark-color);
            transition: var(--transition);
        }

        body.dark-mode .control-input {
            background-color: #374151;
            border-color: #4b5563;
            color: var(--secondary-color);
        }

        .enhancement-controls {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        .enhancement-btn {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: var(--border-radius);
            background-color: var(--light-color);
            color: var(--dark-color);
            cursor: pointer;
            transition: var(--transition);
        }

        body.dark-mode .enhancement-btn {
            background-color: #374151;
            border-color: #4b5563;
            color: var(--secondary-color);
        }

        .enhancement-btn:hover, .enhancement-btn.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .enhancement-slider {
            display: none;
            width: 100%;
            margin-top: 10px;
        }

        .enhancement-slider.active {
            display: block;
        }

        .document-history {
            background-color: var(--light-color);
            border-radius: var(--border-radius);
            padding: 20px;
            box-shadow: var(--box-shadow);
        }

        body.dark-mode .document-history {
            background-color: #1f2937;
        }

        .history-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .history-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
        }

        .history-item {
            border: 1px solid #e5e7eb;
            border-radius: var(--border-radius);
            overflow: hidden;
            cursor: pointer;
            transition: var(--transition);
        }

        body.dark-mode .history-item {
            border-color: #374151;
        }

        .history-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }

        .history-item-img {
            width: 100%;
            height: 120px;
            object-fit: cover;
        }

        .history-item-info {
            padding: 10px;
            font-size: 12px;
            display: flex;
            justify-content: space-between;
        }

        .history-item-date {
            color: #6b7280;
        }

        body.dark-mode .history-item-date {
            color: #9ca3af;
        }

        .history-item-actions {
            display: flex;
            gap: 5px;
        }

        .history-item-btn {
            background: none;
            border: none;
            color: #6b7280;
            cursor: pointer;
            font-size: 14px;
        }

        body.dark-mode .history-item-btn {
            color: #9ca3af;
        }

        .history-item-btn:hover {
            color: var(--primary-color);
        }

        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
            opacity: 0;
            pointer-events: none;
            transition: var(--transition);
        }

        .modal.active {
            opacity: 1;
            pointer-events: all;
        }

        .modal-content {
            background-color: var(--light-color);
            border-radius: var(--border-radius);
            padding: 20px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            transform: translateY(-20px);
            transition: var(--transition);
        }

        body.dark-mode .modal-content {
            background-color: #1f2937;
        }

        .modal.active .modal-content {
            transform: translateY(0);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 20px;
            font-weight: 600;
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #6b7280;
        }

        body.dark-mode .modal-close {
            color: #9ca3af;
        }

        .modal-body {
            margin-bottom: 20px;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .signature-pad {
            border: 1px solid #d1d5db;
            border-radius: var(--border-radius);
            background-color: white;
            width: 100%;
            height: 200px;
            margin-bottom: 15px;
            touch-action: none;
        }

        body.dark-mode .signature-pad {
            border-color: #4b5563;
        }

        .ocr-result {
            background-color: #f3f4f6;
            border-radius: var(--border-radius);
            padding: 15px;
            margin-top: 20px;
            max-height: 300px;
            overflow-y: auto;
        }

        body.dark-mode .ocr-result {
            background-color: #374151;
        }

        .progress-bar {
            width: 100%;
            height: 10px;
            background-color: #e5e7eb;
            border-radius: 5px;
            margin-top: 10px;
            overflow: hidden;
        }

        body.dark-mode .progress-bar {
            background-color: #374151;
        }

        .progress {
            height: 100%;
            background-color: var(--primary-color);
            width: 0%;
            transition: width 0.3s ease;
        }

        .no-documents {
            text-align: center;
            padding: 40px 0;
            color: #6b7280;
        }

        body.dark-mode .no-documents {
            color: #9ca3af;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .status-message {
            padding: 10px;
            border-radius: var(--border-radius);
            margin-bottom: 15px;
            display: none;
        }

        .status-message.success {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--success-color);
            display: block;
        }

        .status-message.error {
            background-color: rgba(239, 68, 68, 0.1);
            color: var(--danger-color);
            display: block;
        }

        .cloud-providers {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }

        .cloud-provider {
            border: 1px solid #d1d5db;
            border-radius: var(--border-radius);
            padding: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
            cursor: pointer;
            transition: var(--transition);
        }

        body.dark-mode .cloud-provider {
            border-color: #4b5563;
        }

        .cloud-provider:hover {
            border-color: var(--primary-color);
            background-color: rgba(79, 70, 229, 0.1);
        }

        body.dark-mode .cloud-provider:hover {
            background-color: rgba(79, 70, 229, 0.2);
        }

        .cloud-provider i {
            font-size: 24px;
        }

        .cloud-provider-name {
            font-size: 12px;
        }

        /* Ad container */
        .ad-container {
            width: 100%;
            margin: 20px 0;
            text-align: center;
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: var(--border-radius);
        }

        body.dark-mode .ad-container {
            background-color: #1f2937;
        }

        /* Responsive adjustments */
        @media (max-width: 576px) {
            .controls {
                grid-template-columns: 1fr;
            }
            
            .scanner-actions {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .history-list {
                grid-template-columns: 1fr 1fr;
            }
        }

        /* Icons */
        @font-face {
            font-family: 'Material Icons';
            font-style: normal;
            font-weight: 400;
            src: url(https://fonts.gstatic.com/s/materialicons/v140/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2) format('woff2');
        }

        .material-icons {
            font-family: 'Material Icons';
            font-weight: normal;
            font-style: normal;
            font-size: 24px;
            line-height: 1;
            letter-spacing: normal;
            text-transform: none;
            display: inline-block;
            white-space: nowrap;
            word-wrap: normal;
            direction: ltr;
            -webkit-font-feature-settings: 'liga';
            -webkit-font-smoothing: antialiased;
        }

        /* Slider styles */
        .slider-container {
            margin-top: 10px;
            display: none;
        }

        .slider-container.active {
            display: block;
        }

        .slider {
            width: 100%;
            height: 8px;
            -webkit-appearance: none;
            appearance: none;
            background: #d1d5db;
            outline: none;
            border-radius: 4px;
        }

        body.dark-mode .slider {
            background: #4b5563;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
        }

        .slider-value {
            text-align: center;
            font-size: 12px;
            margin-top: 5px;
            color: var(--dark-color);
        }

        body.dark-mode .slider-value {
            color: var(--secondary-color);
        }
    </style>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <i class="material-icons">document_scanner</i>
                <span>Advanced Scanner</span>
            </div>
            <button class="theme-toggle" id="themeToggle">
                <i class="material-icons">brightness_4</i>
            </button>
        </header>

        <!-- Google AdSense Banner -->
        <div class="ad-container">
            <!-- AdSense Ad -->
            <ins class="adsbygoogle"
                style="display:block"
                data-ad-client="ca-pub-4111440258134064"
                data-ad-slot="8814394638"
                data-ad-format="auto"
                data-full-width-responsive="true"></ins>
            <script>
                (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
        </div>

        <div class="main-content">
            <div class="sidebar">
                <h3 class="sidebar-title">
                    <i class="material-icons">menu</i>
                    <span>Menu</span>
                </h3>
                <ul class="sidebar-menu">
                    <li>
                        <button class="active" id="scanBtn">
                            <i class="material-icons">document_scanner</i>
                            <span>Scan Document</span>
                        </button>
                    </li>
                    <li>
                        <button id="historyBtn">
                            <i class="material-icons">history</i>
                            <span>Document History</span>
                        </button>
                    </li>
                    <li>
                        <button id="uploadBtn">
                            <i class="material-icons">upload</i>
                            <span>Upload Image</span>
                        </button>
                    </li>
                    <li>
                        <button id="multiPageBtn">
                            <i class="material-icons">collections</i>
                            <span>Multi-Page Scan</span>
                        </button>
                    </li>
                    <li>
                        <button id="ocrBtn">
                            <i class="material-icons">text_fields</i>
                            <span>Text Recognition</span>
                        </button>
                    </li>
                    <li>
                        <button id="exportBtn">
                            <i class="material-icons">save_alt</i>
                            <span>Export Options</span>
                        </button>
                    </li>
                </ul>

                <!-- Google AdSense Sidebar Ad -->
                <div class="ad-container" style="margin-top: 20px;">
                    <ins class="adsbygoogle"
                        style="display:block"
                        data-ad-client="ca-pub-4111440258134064"
                        data-ad-slot="8814394638"
                        data-ad-format="auto"
                        data-full-width-responsive="true"></ins>
                    <script>
                        (adsbygoogle = window.adsbygoogle || []).push({});
                    </script>
                </div>
            </div>

            <div class="scanner-section">
                <div class="scanner-container">
                    <div class="scanner-header">
                        <h3 class="scanner-title">Document Scanner</h3>
                        <div class="scanner-actions">
                            <button class="btn" id="startCameraBtn">
                                <i class="material-icons">camera</i>
                                <span>Start Camera</span>
                            </button>
                            <button class="btn btn-outline" id="captureBtn" disabled>
                                <i class="material-icons">camera_alt</i>
                                <span>Capture</span>
                            </button>
                        </div>
                    </div>

                    <div class="video-container">
                        <video id="scanner-video" autoplay playsinline></video>
                        <svg class="document-overlay" id="documentOverlay"></svg>
                    </div>

                    <div class="canvas-container">
                        <canvas id="scanner-canvas"></canvas>
                        <div class="corner" id="topLeftCorner"></div>
                        <div class="corner" id="topRightCorner"></div>
                        <div class="corner" id="bottomLeftCorner"></div>
                        <div class="corner" id="bottomRightCorner"></div>
                    </div>

                    <div class="controls">
                        <div class="control-group">
                            <label class="control-label">Camera</label>
                            <select class="control-input" id="cameraSelect"></select>
                        </div>
                        <div class="control-group">
                            <label class="control-label">Document Type</label>
                            <select class="control-input" id="documentTypeSelect">
                                <option value="auto">Auto Detect</option>
                                <option value="id">ID Card</option>
                                <option value="a4">A4 Document</option>
                                <option value="receipt">Receipt</option>
                                <option value="businessCard">Business Card</option>
                            </select>
                        </div>
                        <div class="control-group">
                            <label class="control-label">Quality</label>
                            <select class="control-input" id="qualitySelect">
                                <option value="low">Low</option>
                                <option value="medium" selected>Medium</option>
                                <option value="high">High</option>
                                <option value="max">Maximum</option>
                            </select>
                        </div>
                    </div>

                    <div class="enhancement-controls">
                        <button class="enhancement-btn" id="autoEnhanceBtn">
                            <i class="material-icons">auto_fix_high</i>
                            <span>Auto Enhance</span>
                        </button>
                        <button class="enhancement-btn" id="grayscaleBtn">
                            <i class="material-icons">invert_colors_off</i>
                            <span>Grayscale</span>
                        </button>
                        <div class="slider-container" id="brightnessSliderContainer">
                            <input type="range" min="-100" max="100" value="0" class="slider" id="brightnessSlider">
                            <div class="slider-value" id="brightnessValue">0</div>
                        </div>
                        <button class="enhancement-btn" id="brightnessBtn">
                            <i class="material-icons">brightness_6</i>
                            <span>Brightness</span>
                        </button>
                        <div class="slider-container" id="contrastSliderContainer">
                            <input type="range" min="0" max="200" value="100" class="slider" id="contrastSlider">
                            <div class="slider-value" id="contrastValue">100%</div>
                        </div>
                        <button class="enhancement-btn" id="contrastBtn">
                            <i class="material-icons">contrast</i>
                            <span>Contrast</span>
                        </button>
                        <button class="enhancement-btn" id="rotateBtn">
                            <i class="material-icons">rotate_90_degrees_ccw</i>
                            <span>Rotate</span>
                        </button>
                        <button class="enhancement-btn" id="cropBtn">
                            <i class="material-icons">crop</i>
                            <span>Crop</span>
                        </button>
                        <button class="enhancement-btn" id="perspectiveBtn">
                            <i class="material-icons">transform</i>
                            <span>Perspective</span>
                        </button>
                    </div>

                    <div class="scanner-actions">
                        <button class="btn btn-success" id="saveBtn" disabled>
                            <i class="material-icons">save</i>
                            <span>Save Document</span>
                        </button>
                        <button class="btn btn-warning" id="ocrProcessBtn" disabled>
                            <i class="material-icons">text_fields</i>
                            <span>Extract Text</span>
                        </button>
                        <button class="btn" id="pdfBtn" disabled>
                            <i class="material-icons">picture_as_pdf</i>
                            <span>Generate PDF</span>
                        </button>
                        <button class="btn btn-outline" id="resetBtn" disabled>
                            <i class="material-icons">refresh</i>
                            <span>Reset</span>
                        </button>
                    </div>

                    <div class="status-message" id="statusMessage"></div>
                </div>

                <div class="document-history">
                    <h3 class="history-title">
                        <i class="material-icons">history</i>
                        <span>Recent Documents</span>
                    </h3>
                    <div class="history-list" id="historyList">
                        <div class="no-documents">
                            <i class="material-icons" style="font-size: 48px;">folder_open</i>
                            <p>No scanned documents yet</p>
                        </div>
                    </div>
                </div>

                <!-- Google AdSense Footer Ad -->
                <div class="ad-container">
                    <ins class="adsbygoogle"
                        style="display:block"
                        data-ad-client="ca-pub-4111440258134064"
                        data-ad-slot="8814394638"
                        data-ad-format="auto"
                        data-full-width-responsive="true"></ins>
                    <script>
                        (adsbygoogle = window.adsbygoogle || []).push({});
                    </script>
                </div>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <div class="modal" id="uploadModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Upload Document</h3>
                <button class="modal-close" id="uploadModalClose">&times;</button>
            </div>
            <div class="modal-body">
                <input type="file" id="fileInput" accept="image/*" style="display: none;">
                <button class="btn" id="selectFileBtn" style="width: 100%; margin-bottom: 15px;">
                    <i class="material-icons">folder_open</i>
                    <span>Select Image</span>
                </button>
                <div id="uploadPreview" style="text-align: center; margin-bottom: 15px;">
                    <p>No image selected</p>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="uploadCancelBtn">Cancel</button>
                <button class="btn" id="uploadConfirmBtn" disabled>Upload</button>
            </div>
        </div>
    </div>

    <div class="modal" id="multiPageModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Multi-Page Document</h3>
                <button class="modal-close" id="multiPageModalClose">&times;</button>
            </div>
            <div class="modal-body">
                <div id="multiPagePreview" style="display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px;"></div>
                <button class="btn" id="addPageBtn" style="width: 100%; margin-bottom: 15px;">
                    <i class="material-icons">add</i>
                    <span>Add Page</span>
                </button>
                <div class="control-group">
                    <label class="control-label">Document Name</label>
                    <input type="text" class="control-input" id="multiPageName" placeholder="Enter document name">
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="multiPageCancelBtn">Cancel</button>
                <button class="btn" id="multiPageSaveBtn" disabled>Save Document</button>
            </div>
        </div>
    </div>

    <div class="modal" id="ocrModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Text Recognition (OCR)</h3>
                <button class="modal-close" id="ocrModalClose">&times;</button>
            </div>
            <div class="modal-body">
                <div class="progress-bar">
                    <div class="progress" id="ocrProgress"></div>
                </div>
                <p id="ocrStatus">Ready to process...</p>
                <div class="ocr-result" id="ocrResult">
                    <p>Extracted text will appear here...</p>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="ocrCancelBtn">Cancel</button>
                <button class="btn" id="ocrCopyBtn" disabled>Copy Text</button>
                <button class="btn" id="ocrExportBtn" disabled>Export as TXT</button>
            </div>
        </div>
    </div>

    <div class="modal" id="exportModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Export Document</h3>
                <button class="modal-close" id="exportModalClose">&times;</button>
            </div>
            <div class="modal-body">
                <div class="control-group">
                    <label class="control-label">File Name</label>
                    <input type="text" class="control-input" id="exportFileName" placeholder="Enter file name">
                </div>
                <div class="control-group">
                    <label class="control-label">File Format</label>
                    <select class="control-input" id="exportFormat">
                        <option value="pdf">PDF</option>
                        <option value="jpg">JPG</option>
                        <option value="png">PNG</option>
                    </select>
                </div>
                <div class="control-group">
                    <label class="control-label">Quality</label>
                    <select class="control-input" id="exportQuality">
                        <option value="low">Low</option>
                        <option value="medium" selected>Medium</option>
                        <option value="high">High</option>
                    </select>
                </div>
                <h4 style="margin-top: 20px;">Cloud Storage</h4>
                <p style="margin-bottom: 10px; font-size: 14px;">Save to cloud storage:</p>
                <div class="cloud-providers">
                    <div class="cloud-provider" id="googleDriveBtn">
                        <i class="material-icons">cloud</i>
                        <span class="cloud-provider-name">Google Drive</span>
                    </div>
                    <div class="cloud-provider" id="dropboxBtn">
                        <i class="material-icons">cloud</i>
                        <span class="cloud-provider-name">Dropbox</span>
                    </div>
                    <div class="cloud-provider" id="oneDriveBtn">
                        <i class="material-icons">cloud</i>
                        <span class="cloud-provider-name">OneDrive</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="exportCancelBtn">Cancel</button>
                <button class="btn" id="exportConfirmBtn">Export</button>
            </div>
        </div>
    </div>

    <div class="modal" id="signatureModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Add Signature</h3>
                <button class="modal-close" id="signatureModalClose">&times;</button>
            </div>
            <div class="modal-body">
                <div class="signature-pad" id="signaturePad"></div>
                <div style="display: flex; justify-content: space-between; margin-bottom: 15px;">
                    <button class="btn btn-outline" id="clearSignatureBtn">
                        <i class="material-icons">clear</i>
                        <span>Clear</span>
                    </button>
                    <button class="btn btn-outline" id="uploadSignatureBtn">
                        <i class="material-icons">upload</i>
                        <span>Upload Signature</span>
                    </button>
                </div>
                <div class="control-group">
                    <label class="control-label">Signature Position</label>
                    <select class="control-input" id="signaturePosition">
                        <option value="bottom-right">Bottom Right</option>
                        <option value="bottom-left">Bottom Left</option>
                        <option value="top-right">Top Right</option>
                        <option value="top-left">Top Left</option>
                        <option value="center">Center</option>
                    </select>
                </div>
                <div class="control-group">
                    <label class="control-label">Signature Size</label>
                    <select class="control-input" id="signatureSize">
                        <option value="small">Small</option>
                        <option value="medium" selected>Medium</option>
                        <option value="large">Large</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="signatureCancelBtn">Cancel</button>
                <button class="btn" id="signatureApplyBtn">Apply Signature</button>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let videoStream = null;
        let currentDocument = null;
        let documentsHistory = [];
        let multiPageDocuments = [];
        let isCropping = false;
        let isAdjustingPerspective = false;
        let corners = [];
        let currentPage = null;
        let signatureCanvas = null;
        let signatureCtx = null;
        let isDrawing = false;
        let brightnessSliderVisible = false;
        let contrastSliderVisible = false;

        // DOM elements
        const videoElement = document.getElementById('scanner-video');
        const canvasElement = document.getElementById('scanner-canvas');
        const canvasContainer = document.querySelector('.canvas-container');
        const videoContainer = document.querySelector('.video-container');
        const documentOverlay = document.getElementById('documentOverlay');
        const cameraSelect = document.getElementById('cameraSelect');
        const startCameraBtn = document.getElementById('startCameraBtn');
        const captureBtn = document.getElementById('captureBtn');
        const saveBtn = document.getElementById('saveBtn');
        const resetBtn = document.getElementById('resetBtn');
        const pdfBtn = document.getElementById('pdfBtn');
        const ocrProcessBtn = document.getElementById('ocrProcessBtn');
        const autoEnhanceBtn = document.getElementById('autoEnhanceBtn');
        const grayscaleBtn = document.getElementById('grayscaleBtn');
        const brightnessBtn = document.getElementById('brightnessBtn');
        const contrastBtn = document.getElementById('contrastBtn');
        const rotateBtn = document.getElementById('rotateBtn');
        const cropBtn = document.getElementById('cropBtn');
        const perspectiveBtn = document.getElementById('perspectiveBtn');
        const historyList = document.getElementById('historyList');
        const statusMessage = document.getElementById('statusMessage');
        const themeToggle = document.getElementById('themeToggle');
        const brightnessSlider = document.getElementById('brightnessSlider');
        const contrastSlider = document.getElementById('contrastSlider');
        const brightnessValue = document.getElementById('brightnessValue');
        const contrastValue = document.getElementById('contrastValue');
        const brightnessSliderContainer = document.getElementById('brightnessSliderContainer');
        const contrastSliderContainer = document.getElementById('contrastSliderContainer');

        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            // Load history from localStorage
            loadHistory();
            
            // Setup event listeners
            setupEventListeners();
            
            // Check for service worker support for offline functionality
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/sw.js').then(
                    function(registration) {
                        console.log('ServiceWorker registration successful');
                    }, 
                    function(err) {
                        console.log('ServiceWorker registration failed: ', err);
                    }
                );
            }
        });

        // Load documents history from localStorage
        function loadHistory() {
            const savedHistory = localStorage.getItem('documentsHistory');
            if (savedHistory) {
                documentsHistory = JSON.parse(savedHistory);
                renderHistory();
            }
        }

        // Save documents history to localStorage
        function saveHistory() {
            localStorage.setItem('documentsHistory', JSON.stringify(documentsHistory));
        }

        // Render documents history
        function renderHistory() {
            if (documentsHistory.length === 0) {
                historyList.innerHTML = `
                    <div class="no-documents">
                        <i class="material-icons" style="font-size: 48px;">folder_open</i>
                        <p>No scanned documents yet</p>
                    </div>
                `;
                return;
            }

            historyList.innerHTML = '';
            documentsHistory.slice(0, 10).forEach((doc, index) => {
                const historyItem = document.createElement('div');
                historyItem.className = 'history-item';
                historyItem.innerHTML = `
                    <img src="${doc.thumbnail}" class="history-item-img" alt="Scanned document">
                    <div class="history-item-info">
                        <span class="history-item-date">${formatDate(doc.timestamp)}</span>
                        <div class="history-item-actions">
                            <button class="history-item-btn" data-action="view" data-index="${index}">
                                <i class="material-icons">visibility</i>
                            </button>
                            <button class="history-item-btn" data-action="delete" data-index="${index}">
                                <i class="material-icons">delete</i>
                            </button>
                        </div>
                    </div>
                `;
                historyList.appendChild(historyItem);
            });

            // Add event listeners to history items
            document.querySelectorAll('[data-action="view"]').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    viewDocument(index);
                });
            });

            document.querySelectorAll('[data-action="delete"]').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    deleteDocument(index);
                });
            });
        }

        // Format date for display
        function formatDate(timestamp) {
            const date = new Date(timestamp);
            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        }

        // View document from history
        function viewDocument(index) {
            if (index >= 0 && index < documentsHistory.length) {
                currentDocument = documentsHistory[index];
                showCapturedImage(currentDocument.imageData);
                showStatus('Document loaded from history', 'success');
            }
        }

        // Delete document from history
        function deleteDocument(index) {
            if (index >= 0 && index < documentsHistory.length) {
                documentsHistory.splice(index, 1);
                saveHistory();
                renderHistory();
                showStatus('Document deleted', 'success');
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            // Theme toggle
            themeToggle.addEventListener('click', toggleTheme);

            // Camera controls
            startCameraBtn.addEventListener('click', toggleCamera);
            captureBtn.addEventListener('click', captureImage);
            cameraSelect.addEventListener('change', switchCamera);

            // Document processing buttons
            autoEnhanceBtn.addEventListener('click', applyAutoEnhance);
            grayscaleBtn.addEventListener('click', applyGrayscale);
            brightnessBtn.addEventListener('click', toggleBrightnessSlider);
            contrastBtn.addEventListener('click', toggleContrastSlider);
            rotateBtn.addEventListener('click', rotateImage);
            cropBtn.addEventListener('click', toggleCropMode);
            perspectiveBtn.addEventListener('click', togglePerspectiveMode);

            // Slider events
            brightnessSlider.addEventListener('input', applyBrightness);
            contrastSlider.addEventListener('input', applyContrast);

            // Main action buttons
            saveBtn.addEventListener('click', saveDocument);
            resetBtn.addEventListener('click', resetScanner);
            pdfBtn.addEventListener('click', showExportModal);
            ocrProcessBtn.addEventListener('click', showOcrModal);

            // Sidebar menu buttons
            document.getElementById('scanBtn').addEventListener('click', showScanner);
            document.getElementById('historyBtn').addEventListener('click', showHistory);
            document.getElementById('uploadBtn').addEventListener('click', showUploadModal);
            document.getElementById('multiPageBtn').addEventListener('click', showMultiPageModal);
            document.getElementById('ocrBtn').addEventListener('click', showOcrModal);
            document.getElementById('exportBtn').addEventListener('click', showExportModal);

            // Modal controls
            setupModalControls();

            // Corner drag events for cropping
            setupCornerDragEvents();

            // Initialize signature pad
            initSignaturePad();
        }

        // Toggle dark/light theme
        function toggleTheme() {
            document.body.classList.toggle('dark-mode');
            const icon = themeToggle.querySelector('i');
            if (document.body.classList.contains('dark-mode')) {
                icon.textContent = 'brightness_7';
            } else {
                icon.textContent = 'brightness_4';
            }
        }

        // Toggle brightness slider
        function toggleBrightnessSlider() {
            brightnessSliderVisible = !brightnessSliderVisible;
            if (brightnessSliderVisible) {
                brightnessSliderContainer.classList.add('active');
                contrastSliderContainer.classList.remove('active');
                contrastSliderVisible = false;
            } else {
                brightnessSliderContainer.classList.remove('active');
            }
        }

        // Toggle contrast slider
        function toggleContrastSlider() {
            contrastSliderVisible = !contrastSliderVisible;
            if (contrastSliderVisible) {
                contrastSliderContainer.classList.add('active');
                brightnessSliderContainer.classList.remove('active');
                brightnessSliderVisible = false;
            } else {
                contrastSliderContainer.classList.remove('active');
            }
        }

        // Apply brightness adjustment
        function applyBrightness() {
            if (!currentDocument) return;
            
            const value = parseInt(brightnessSlider.value);
            brightnessValue.textContent = value;
            
            const canvas = document.getElementById('scanner-canvas');
            const ctx = canvas.getContext('2d');
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            
            for (let i = 0; i < data.length; i += 4) {
                data[i] = Math.min(255, Math.max(0, data[i] + value));     // R
                data[i + 1] = Math.min(255, Math.max(0, data[i + 1] + value)); // G
                data[i + 2] = Math.min(255, Math.max(0, data[i + 2] + value)); // B
            }
            
            ctx.putImageData(imageData, 0, 0);
            currentDocument.imageData = canvas.toDataURL('image/jpeg', 0.9);
        }

        // Apply contrast adjustment
        function applyContrast() {
            if (!currentDocument) return;
            
            const value = parseInt(contrastSlider.value);
            const contrast = value / 100; // Convert percentage to factor
            contrastValue.textContent = value + '%';
            
            const canvas = document.getElementById('scanner-canvas');
            const ctx = canvas.getContext('2d');
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            
            for (let i = 0; i < data.length; i += 4) {
                data[i] = ((data[i] / 255 - 0.5) * contrast + 0.5) * 255;     // R
                data[i + 1] = ((data[i + 1] / 255 - 0.5) * contrast + 0.5) * 255; // G
                data[i + 2] = ((data[i + 2] / 255 - 0.5) * contrast + 0.5) * 255; // B
            }
            
            ctx.putImageData(imageData, 0, 0);
            currentDocument.imageData = canvas.toDataURL('image/jpeg', 0.9);
        }

        // Toggle camera on/off
        async function toggleCamera() {
            if (videoStream) {
                stopCamera();
                startCameraBtn.innerHTML = '<i class="material-icons">camera</i><span>Start Camera</span>';
                captureBtn.disabled = true;
            } else {
                try {
                    await startCamera();
                    startCameraBtn.innerHTML = '<i class="material-icons">videocam_off</i><span>Stop Camera</span>';
                    captureBtn.disabled = false;
                    showStatus('Camera started', 'success');
                } catch (error) {
                    console.error('Error starting camera:', error);
                    showStatus('Failed to start camera: ' + error.message, 'error');
                    
                    // Provide fallback instructions
                    if (error.name === 'NotAllowedError') {
                        showStatus('Please allow camera access in your browser settings', 'error');
                    } else if (error.name === 'NotFoundError') {
                        showStatus('No camera found on this device', 'error');
                    } else {
                        showStatus('Camera error: ' + error.message, 'error');
                    }
                }
            }
        }

        // Start camera with proper error handling
        async function startCamera() {
            try {
                // First try with ideal constraints
                let constraints = {
                    video: {
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: 'environment'
                    },
                    audio: false
                };

                // Get available devices
                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoDevices = devices.filter(device => device.kind === 'videoinput');
                
                // Populate camera select
                cameraSelect.innerHTML = '';
                videoDevices.forEach((device, index) => {
                    const option = document.createElement('option');
                    option.value = device.deviceId;
                    option.text = device.label || `Camera ${index + 1}`;
                    cameraSelect.appendChild(option);
                });

                // Try to get user media
                videoStream = await navigator.mediaDevices.getUserMedia(constraints);
                
                // If no stream, try with less specific constraints
                if (!videoStream) {
                    constraints = {
                        video: true,
                        audio: false
                    };
                    videoStream = await navigator.mediaDevices.getUserMedia(constraints);
                }

                // Attach stream to video element
                videoElement.srcObject = videoStream;
                
                // Wait for video to be ready
                await new Promise((resolve) => {
                    videoElement.onloadedmetadata = () => {
                        videoElement.play();
                        resolve();
                    };
                });

                // Start edge detection simulation
                simulateEdgeDetection();
                
                return videoStream;
            } catch (error) {
                // Handle specific errors
                if (error.name === 'NotAllowedError') {
                    throw new Error('Camera access denied. Please allow camera access in your browser settings.');
                } else if (error.name === 'NotFoundError') {
                    throw new Error('No camera found on this device.');
                } else if (error.name === 'NotReadableError') {
                    throw new Error('Camera is already in use by another application.');
                } else if (error.name === 'OverconstrainedError') {
                    throw new Error('Camera does not support requested constraints.');
                } else {
                    throw new Error('Error accessing camera: ' + error.message);
                }
            }
        }

        // Simulate edge detection with animation
        function simulateEdgeDetection() {
            // Clear previous overlay
            documentOverlay.innerHTML = '';
            
            // Get video dimensions
            const width = videoElement.videoWidth || 640;
            const height = videoElement.videoHeight || 480;
            
            // Create SVG element
            const svgNS = "http://www.w3.org/2000/svg";
            const svg = document.createElementNS(svgNS, "svg");
            svg.setAttribute("width", "100%");
            svg.setAttribute("height", "100%");
            svg.setAttribute("viewBox", `0 0 ${width} ${height}`);
            
            // Create polygon for document edges
            const polygon = document.createElementNS(svgNS, "polygon");
            polygon.setAttribute("class", "document-polygon");
            
            // Animate the polygon points to simulate edge detection
            const animationSteps = [
                // Initial small rectangle in center
                [
                    { x: width * 0.4, y: height * 0.4 },
                    { x: width * 0.6, y: height * 0.4 },
                    { x: width * 0.6, y: height * 0.6 },
                    { x: width * 0.4, y: height * 0.6 }
                ],
                // Expanding to document edges
                [
                    { x: width * 0.2, y: height * 0.1 },
                    { x: width * 0.8, y: height * 0.15 },
                    { x: width * 0.85, y: height * 0.8 },
                    { x: width * 0.15, y: height * 0.75 }
                ]
            ];
            
            // Animate between steps
            let currentStep = 0;
            const animate = () => {
                if (currentStep < animationSteps.length) {
                    const points = animationSteps[currentStep];
                    polygon.setAttribute("points", points.map(p => `${p.x},${p.y}`).join(" "));
                    currentStep++;
                    setTimeout(animate, 500);
                }
            };
            
            svg.appendChild(polygon);
            documentOverlay.appendChild(svg);
            
            // Start animation
            animate();
            
            // Store final corners for later use
            corners = animationSteps[animationSteps.length - 1];
        }

        // Switch camera
        async function switchCamera() {
            if (!videoStream) return;

            const selectedDeviceId = cameraSelect.value;
            try {
                // Stop current stream
                videoStream.getTracks().forEach(track => track.stop());

                // Start new stream with selected camera
                const constraints = {
                    video: {
                        deviceId: { exact: selectedDeviceId },
                        width: { ideal: 1280 },
                        height: { ideal: 720 }
                    },
                    audio: false
                };

                videoStream = await navigator.mediaDevices.getUserMedia(constraints);
                videoElement.srcObject = videoStream;
                
                // Wait for video to be ready
                await new Promise((resolve) => {
                    videoElement.onloadedmetadata = () => {
                        videoElement.play();
                        resolve();
                    };
                });

                // Restart edge detection
                simulateEdgeDetection();
                showStatus('Camera switched', 'success');
            } catch (error) {
                console.error('Error switching camera:', error);
                showStatus('Failed to switch camera', 'error');
            }
        }

        // Stop camera
        function stopCamera() {
            if (videoStream) {
                videoStream.getTracks().forEach(track => track.stop());
                videoStream = null;
                videoElement.srcObject = null;
                documentOverlay.innerHTML = ''; // Clear edge detection overlay
            }
        }

        // Capture image from camera
        function captureImage() {
            if (!videoStream) return;

            const canvas = document.createElement('canvas');
            canvas.width = videoElement.videoWidth;
            canvas.height = videoElement.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

            // For demo purposes, we'll crop to the detected document area
            const croppedCanvas = document.createElement('canvas');
            const croppedCtx = croppedCanvas.getContext('2d');
            
            // Calculate bounding box of the detected document
            const minX = Math.min(...corners.map(p => p.x));
            const minY = Math.min(...corners.map(p => p.y));
            const maxX = Math.max(...corners.map(p => p.x));
            const maxY = Math.max(...corners.map(p => p.y));
            
            const cropWidth = maxX - minX;
            const cropHeight = maxY - minY;
            
            croppedCanvas.width = cropWidth;
            croppedCanvas.height = cropHeight;
            
            // Draw the cropped area
            croppedCtx.drawImage(canvas, minX, minY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);
            
            // Show the captured and cropped image
            showCapturedImage(croppedCanvas.toDataURL('image/jpeg', 0.9));
            showStatus('Document captured', 'success');
        }

        // Show captured image in canvas
        function showCapturedImage(imageData) {
            currentDocument = {
                imageData: imageData,
                timestamp: Date.now(),
                thumbnail: createThumbnail(imageData)
            };

            videoContainer.style.display = 'none';
            canvasContainer.style.display = 'block';
            
            const img = new Image();
            img.onload = function() {
                const canvas = document.getElementById('scanner-canvas');
                const ctx = canvas.getContext('2d');
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                
                // Enable action buttons
                saveBtn.disabled = false;
                resetBtn.disabled = false;
                pdfBtn.disabled = false;
                ocrProcessBtn.disabled = false;
                autoEnhanceBtn.disabled = false;
                grayscaleBtn.disabled = false;
                brightnessBtn.disabled = false;
                contrastBtn.disabled = false;
                rotateBtn.disabled = false;
                cropBtn.disabled = false;
                perspectiveBtn.disabled = false;
            };
            img.src = imageData;
        }

        // Create thumbnail from image data
        function createThumbnail(imageData) {
            const img = new Image();
            img.src = imageData;
            
            const canvas = document.createElement('canvas');
            canvas.width = 150;
            canvas.height = 120;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, 150, 120);
            
            return canvas.toDataURL('image/jpeg', 0.7);
        }

        // Apply auto enhancement to image
        function applyAutoEnhance() {
            if (!currentDocument) return;
            
            const canvas = document.getElementById('scanner-canvas');
            const ctx = canvas.getContext('2d');
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            
            // Simple auto enhance - adjust contrast and brightness
            const data = imageData.data;
            const contrast = 1.2; // Contrast factor
            const brightness = 20; // Brightness adjustment
            
            for (let i = 0; i < data.length; i += 4) {
                // Apply contrast
                data[i] = ((data[i] / 255 - 0.5) * contrast + 0.5) * 255;     // R
                data[i + 1] = ((data[i + 1] / 255 - 0.5) * contrast + 0.5) * 255; // G
                data[i + 2] = ((data[i + 2] / 255 - 0.5) * contrast + 0.5) * 255; // B
                
                // Apply brightness
                data[i] = Math.min(255, Math.max(0, data[i] + brightness));     // R
                data[i + 1] = Math.min(255, Math.max(0, data[i + 1] + brightness)); // G
                data[i + 2] = Math.min(255, Math.max(0, data[i + 2] + brightness)); // B
            }
            
            ctx.putImageData(imageData, 0, 0);
            currentDocument.imageData = canvas.toDataURL('image/jpeg', 0.9);
            showStatus('Auto enhancement applied', 'success');
        }

        // Apply grayscale filter
        function applyGrayscale() {
            if (!currentDocument) return;
            
            const canvas = document.getElementById('scanner-canvas');
            const ctx = canvas.getContext('2d');
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            
            for (let i = 0; i < data.length; i += 4) {
                const avg = (data[i] * 0.3 + data[i + 1] * 0.59 + data[i + 2] * 0.11);
                data[i] = avg;     // R
                data[i + 1] = avg; // G
                data[i + 2] = avg; // B
            }
            
            ctx.putImageData(imageData, 0, 0);
            currentDocument.imageData = canvas.toDataURL('image/jpeg', 0.9);
            showStatus('Grayscale filter applied', 'success');
        }

        // Rotate image
        function rotateImage() {
            if (!currentDocument) return;
            
            const canvas = document.getElementById('scanner-canvas');
            const tempCanvas = document.createElement('canvas');
            tempCanvas.width = canvas.height;
            tempCanvas.height = canvas.width;
            const tempCtx = tempCanvas.getContext('2d');
            
            // Rotate 90 degrees clockwise
            tempCtx.translate(tempCanvas.width / 2, tempCanvas.height / 2);
            tempCtx.rotate(Math.PI / 2);
            tempCtx.drawImage(canvas, -canvas.width / 2, -canvas.height / 2);
            
            // Replace original canvas
            canvas.width = tempCanvas.width;
            canvas.height = tempCanvas.height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(tempCanvas, 0, 0);
            
            currentDocument.imageData = canvas.toDataURL('image/jpeg', 0.9);
            showStatus('Image rotated', 'success');
        }

        // Toggle crop mode
        function toggleCropMode() {
            isCropping = !isCropping;
            
            if (isCropping) {
                cropBtn.classList.add('active');
                showStatus('Crop mode enabled - drag the corners to adjust', 'success');
                
                // Show corners
                document.querySelectorAll('.corner').forEach(corner => {
                    corner.style.display = 'block';
                    
                    // Position corners at the edges of the canvas
                    const canvas = document.getElementById('scanner-canvas');
                    const rect = canvas.getBoundingClientRect();
                    
                    if (corner.id === 'topLeftCorner') {
                        corner.style.left = '0px';
                        corner.style.top = '0px';
                    } else if (corner.id === 'topRightCorner') {
                        corner.style.left = (rect.width - 20) + 'px';
                        corner.style.top = '0px';
                    } else if (corner.id === 'bottomLeftCorner') {
                        corner.style.left = '0px';
                        corner.style.top = (rect.height - 20) + 'px';
                    } else if (corner.id === 'bottomRightCorner') {
                        corner.style.left = (rect.width - 20) + 'px';
                        corner.style.top = (rect.height - 20) + 'px';
                    }
                });
            } else {
                cropBtn.classList.remove('active');
                
                // Hide corners
                document.querySelectorAll('.corner').forEach(corner => {
                    corner.style.display = 'none';
                });
                
                // Apply crop based on corner positions
                const canvas = document.getElementById('scanner-canvas');
                const ctx = canvas.getContext('2d');
                
                // Get corner positions
                const topLeft = document.getElementById('topLeftCorner');
                const topRight = document.getElementById('topRightCorner');
                const bottomLeft = document.getElementById('bottomLeftCorner');
                
                const topLeftRect = topLeft.getBoundingClientRect();
                const topRightRect = topRight.getBoundingClientRect();
                const bottomLeftRect = bottomLeft.getBoundingClientRect();
                
                const canvasRect = canvas.getBoundingClientRect();
                
                // Calculate crop area
                const cropX = topLeftRect.left - canvasRect.left;
                const cropY = topLeftRect.top - canvasRect.top;
                const cropWidth = topRightRect.left - topLeftRect.left;
                const cropHeight = bottomLeftRect.top - topLeftRect.top;
                
                // Create new canvas with cropped image
                const croppedCanvas = document.createElement('canvas');
                croppedCanvas.width = cropWidth;
                croppedCanvas.height = cropHeight;
                const croppedCtx = croppedCanvas.getContext('2d');
                
                // Draw cropped area
                croppedCtx.drawImage(canvas, cropX, cropY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);
                
                // Replace original canvas
                canvas.width = cropWidth;
                canvas.height = cropHeight;
                ctx.drawImage(croppedCanvas, 0, 0);
                
                currentDocument.imageData = canvas.toDataURL('image/jpeg', 0.9);
                showStatus('Image cropped', 'success');
            }
        }

        // Toggle perspective mode
        function togglePerspectiveMode() {
            isAdjustingPerspective = !isAdjustingPerspective;
            
            if (isAdjustingPerspective) {
                perspectiveBtn.classList.add('active');
                showStatus('Perspective mode enabled - drag the corners to adjust', 'success');
                
                // Show corners
                document.querySelectorAll('.corner').forEach(corner => {
                    corner.style.display = 'block';
                    
                    // Position corners at the edges of the canvas
                    const canvas = document.getElementById('scanner-canvas');
                    const rect = canvas.getBoundingClientRect();
                    
                    if (corner.id === 'topLeftCorner') {
                        corner.style.left = '0px';
                        corner.style.top = '0px';
                    } else if (corner.id === 'topRightCorner') {
                        corner.style.left = (rect.width - 20) + 'px';
                        corner.style.top = '0px';
                    } else if (corner.id === 'bottomLeftCorner') {
                        corner.style.left = '0px';
                        corner.style.top = (rect.height - 20) + 'px';
                    } else if (corner.id === 'bottomRightCorner') {
                        corner.style.left = (rect.width - 20) + 'px';
                        corner.style.top = (rect.height - 20) + 'px';
                    }
                });
            } else {
                perspectiveBtn.classList.remove('active');
                
                // Hide corners
                document.querySelectorAll('.corner').forEach(corner => {
                    corner.style.display = 'none';
                });
                
                // Apply perspective correction (simplified for demo)
                showStatus('Perspective correction would be applied here in a real app', 'success');
            }
        }

        // Setup corner drag events for cropping/perspective
        function setupCornerDragEvents() {
            const corners = document.querySelectorAll('.corner');
            
            corners.forEach(corner => {
                corner.addEventListener('mousedown', startDrag);
                corner.addEventListener('touchstart', startDrag);
            });
            
            function startDrag(e) {
                e.preventDefault();
                const corner = e.target;
                const startX = e.clientX || e.touches[0].clientX;
                const startY = e.clientY || e.touches[0].clientY;
                const startLeft = parseInt(corner.style.left || '0');
                const startTop = parseInt(corner.style.top || '0');
                
                function moveHandler(e) {
                    const currentX = e.clientX || e.touches[0].clientX;
                    const currentY = e.clientY || e.touches[0].clientY;
                    const dx = currentX - startX;
                    const dy = currentY - startY;
                    
                    corner.style.left = (startLeft + dx) + 'px';
                    corner.style.top = (startTop + dy) + 'px';
                }
                
                function endHandler() {
                    document.removeEventListener('mousemove', moveHandler);
                    document.removeEventListener('touchmove', moveHandler);
                    document.removeEventListener('mouseup', endHandler);
                    document.removeEventListener('touchend', endHandler);
                }
                
                document.addEventListener('mousemove', moveHandler);
                document.addEventListener('touchmove', moveHandler);
                document.addEventListener('mouseup', endHandler);
                document.addEventListener('touchend', endHandler);
            }
        }

        // Save document to history
        function saveDocument() {
            if (!currentDocument) return;
            
            documentsHistory.unshift(currentDocument);
            if (documentsHistory.length > 50) {
                documentsHistory.pop(); // Limit history to 50 items
            }
            
            saveHistory();
            renderHistory();
            showStatus('Document saved to history', 'success');
        }

        // Reset scanner
        function resetScanner() {
            if (videoStream) {
                videoContainer.style.display = 'block';
                canvasContainer.style.display = 'none';
            } else {
                canvasContainer.style.display = 'none';
            }
            
            currentDocument = null;
            
            // Disable action buttons
            saveBtn.disabled = true;
            resetBtn.disabled = true;
            pdfBtn.disabled = true;
            ocrProcessBtn.disabled = true;
            autoEnhanceBtn.disabled = true;
            grayscaleBtn.disabled = true;
            brightnessBtn.disabled = true;
            contrastBtn.disabled = true;
            rotateBtn.disabled = true;
            cropBtn.disabled = true;
            perspectiveBtn.disabled = true;
            
            // Reset enhancement buttons
            autoEnhanceBtn.classList.remove('active');
            grayscaleBtn.classList.remove('active');
            
            // Hide sliders
            brightnessSliderContainer.classList.remove('active');
            contrastSliderContainer.classList.remove('active');
            brightnessSliderVisible = false;
            contrastSliderVisible = false;
            
            // Reset slider values
            brightnessSlider.value = 0;
            brightnessValue.textContent = '0';
            contrastSlider.value = 100;
            contrastValue.textContent = '100%';
            
            showStatus('Scanner reset', 'success');
        }

        // Show export modal
        function showExportModal() {
            if (!currentDocument) return;
            
            document.getElementById('exportFileName').value = `document_${new Date().toISOString().slice(0, 10)}`;
            exportModal.classList.add('active');
        }

        // Show OCR modal
        function showOcrModal() {
            if (!currentDocument) return;
            
            document.getElementById('ocrResult').innerHTML = '<p>Extracted text will appear here...</p>';
            document.getElementById('ocrStatus').textContent = 'Ready to process...';
            document.getElementById('ocrProgress').style.width = '0%';
            document.getElementById('ocrCopyBtn').disabled = true;
            document.getElementById('ocrExportBtn').disabled = true;
            
            ocrModal.classList.add('active');
            
            // Start OCR processing
            processOCR();
        }

        // Process OCR on current document
        function processOCR() {
            // In a real app, you would use Tesseract.js here
            // For this demo, we'll simulate OCR with a timeout
            
            const progressBar = document.getElementById('ocrProgress');
            const statusText = document.getElementById('ocrStatus');
            const resultDiv = document.getElementById('ocrResult');
            
            // Simulate progress
            let progress = 0;
            const interval = setInterval(() => {
                progress += 5;
                progressBar.style.width = `${progress}%`;
                
                if (progress < 30) {
                    statusText.textContent = 'Initializing OCR engine...';
                } else if (progress < 70) {
                    statusText.textContent = 'Processing image...';
                } else if (progress < 90) {
                    statusText.textContent = 'Recognizing text...';
                } else {
                    statusText.textContent = 'Finalizing results...';
                }
                
                if (progress >= 100) {
                    clearInterval(interval);
                    statusText.textContent = 'OCR completed!';
                    
                    // Simulated OCR result
                    resultDiv.innerHTML = `
                        <h4>Extracted Text:</h4>
                        <p>This is a simulated OCR result. In a real application, this would show the actual text extracted from your document using Tesseract.js.</p>
                        <p>The text would appear here with proper formatting and line breaks.</p>
                        <p>For demonstration purposes, we're showing this placeholder text.</p>
                    `;
                    
                    document.getElementById('ocrCopyBtn').disabled = false;
                    document.getElementById('ocrExportBtn').disabled = false;
                }
            }, 200);
        }

        // Show upload modal
        function showUploadModal() {
            document.getElementById('uploadPreview').innerHTML = '<p>No image selected</p>';
            document.getElementById('uploadConfirmBtn').disabled = true;
            uploadModal.classList.add('active');
        }

        // Show multi-page modal
        function showMultiPageModal() {
            document.getElementById('multiPagePreview').innerHTML = '';
            document.getElementById('multiPageName').value = `document_${new Date().toISOString().slice(0, 10)}`;
            document.getElementById('multiPageSaveBtn').disabled = true;
            multiPageModal.classList.add('active');
        }

        // Show scanner section
        function showScanner() {
            document.querySelector('.scanner-container').style.display = 'block';
            document.querySelector('.document-history').style.display = 'block';
        }

        // Show history section
        function showHistory() {
            document.querySelector('.scanner-container').style.display = 'none';
            document.querySelector('.document-history').style.display = 'block';
        }

        // Setup modal controls
        function setupModalControls() {
            // Upload modal
            document.getElementById('selectFileBtn').addEventListener('click', function() {
                document.getElementById('fileInput').click();
            });
            
            document.getElementById('fileInput').addEventListener('change', function(e) {
                if (e.target.files && e.target.files[0]) {
                    const file = e.target.files[0];
                    const reader = new FileReader();
                    
                    reader.onload = function(event) {
                        const preview = document.getElementById('uploadPreview');
                        preview.innerHTML = `<img src="${event.target.result}" style="max-width: 100%; max-height: 300px;">`;
                        document.getElementById('uploadConfirmBtn').disabled = false;
                    };
                    
                    reader.readAsDataURL(file);
                }
            });
            
            document.getElementById('uploadConfirmBtn').addEventListener('click', function() {
                const img = document.querySelector('#uploadPreview img');
                if (img) {
                    showCapturedImage(img.src);
                    uploadModal.classList.remove('active');
                    showStatus('Image uploaded', 'success');
                }
            });
            
            document.getElementById('uploadModalClose').addEventListener('click', function() {
                uploadModal.classList.remove('active');
            });
            
            document.getElementById('uploadCancelBtn').addEventListener('click', function() {
                uploadModal.classList.remove('active');
            });
            
            // Multi-page modal
            document.getElementById('addPageBtn').addEventListener('click', function() {
                // In a real app, this would open the camera or file picker to add a page
                alert('In a real app, this would open the camera or file picker to add a page to the multi-page document.');
            });
            
            document.getElementById('multiPageSaveBtn').addEventListener('click', function() {
                const docName = document.getElementById('multiPageName').value;
                if (docName && multiPageDocuments.length > 0) {
                    // Save multi-page document
                    showStatus(`Multi-page document "${docName}" saved`, 'success');
                    multiPageModal.classList.remove('active');
                }
            });
            
            document.getElementById('multiPageModalClose').addEventListener('click', function() {
                multiPageModal.classList.remove('active');
            });
            
            document.getElementById('multiPageCancelBtn').addEventListener('click', function() {
                multiPageModal.classList.remove('active');
            });
            
            // OCR modal
            document.getElementById('ocrCopyBtn').addEventListener('click', function() {
                const text = document.getElementById('ocrResult').textContent;
                navigator.clipboard.writeText(text).then(() => {
                    showStatus('Text copied to clipboard', 'success');
                });
            });
            
            document.getElementById('ocrExportBtn').addEventListener('click', function() {
                const text = document.getElementById('ocrResult').textContent;
                const blob = new Blob([text], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'extracted_text.txt';
                a.click();
                showStatus('Text exported as TXT file', 'success');
            });
            
            document.getElementById('ocrModalClose').addEventListener('click', function() {
                ocrModal.classList.remove('active');
            });
            
            document.getElementById('ocrCancelBtn').addEventListener('click', function() {
                ocrModal.classList.remove('active');
            });
            
            // Export modal
            document.getElementById('exportConfirmBtn').addEventListener('click', function() {
                const fileName = document.getElementById('exportFileName').value;
                const format = document.getElementById('exportFormat').value;
                
                if (!currentDocument) return;
                
                if (format === 'pdf') {
                    // In a real app, you would use jsPDF here
                    alert(`In a real app, this would export as PDF with filename: ${fileName}.pdf`);
                } else {
                    const a = document.createElement('a');
                    a.href = currentDocument.imageData;
                    a.download = `${fileName}.${format}`;
                    a.click();
                }
                
                showStatus(`Document exported as ${format.toUpperCase()}`, 'success');
                exportModal.classList.remove('active');
            });
            
            document.getElementById('exportModalClose').addEventListener('click', function() {
                exportModal.classList.remove('active');
            });
            
            document.getElementById('exportCancelBtn').addEventListener('click', function() {
                exportModal.classList.remove('active');
            });
            
            // Cloud provider buttons
            document.getElementById('googleDriveBtn').addEventListener('click', function() {
                alert('In a real app, this would integrate with Google Drive API to save the document.');
            });
            
            document.getElementById('dropboxBtn').addEventListener('click', function() {
                alert('In a real app, this would integrate with Dropbox API to save the document.');
            });
            
            document.getElementById('oneDriveBtn').addEventListener('click', function() {
                alert('In a real app, this would integrate with OneDrive API to save the document.');
            });
            
            // Signature modal
            document.getElementById('signatureApplyBtn').addEventListener('click', function() {
                if (!signatureCanvas || !currentDocument) return;
                
                // Get signature as image
                const signatureData = signatureCanvas.toDataURL('image/png');
                
                // Apply signature to document
                const canvas = document.getElementById('scanner-canvas');
                const ctx = canvas.getContext('2d');
                const img = new Image();
                
                img.onload = function() {
                    // Draw signature based on position and size
                    const position = document.getElementById('signaturePosition').value;
                    const size = document.getElementById('signatureSize').value;
                    
                    let sizeWidth, sizeHeight, x, y;
                    
                    // Set size based on selection
                    switch (size) {
                        case 'small':
                            sizeWidth = canvas.width * 0.15;
                            sizeHeight = (img.height / img.width) * sizeWidth;
                            break;
                        case 'large':
                            sizeWidth = canvas.width * 0.3;
                            sizeHeight = (img.height / img.width) * sizeWidth;
                            break;
                        case 'medium':
                        default:
                            sizeWidth = canvas.width * 0.2;
                            sizeHeight = (img.height / img.width) * sizeWidth;
                    }
                    
                    // Set position based on selection
                    switch (position) {
                        case 'bottom-left':
                            x = 20;
                            y = canvas.height - sizeHeight - 20;
                            break;
                        case 'top-right':
                            x = canvas.width - sizeWidth - 20;
                            y = 20;
                            break;
                        case 'top-left':
                            x = 20;
                            y = 20;
                            break;
                        case 'center':
                            x = (canvas.width - sizeWidth) / 2;
                            y = (canvas.height - sizeHeight) / 2;
                            break;
                        case 'bottom-right':
                        default:
                            x = canvas.width - sizeWidth - 20;
                            y = canvas.height - sizeHeight - 20;
                    }
                    
                    ctx.drawImage(img, x, y, sizeWidth, sizeHeight);
                    currentDocument.imageData = canvas.toDataURL('image/jpeg', 0.9);
                    showStatus('Signature applied to document', 'success');
                    signatureModal.classList.remove('active');
                };
                
                img.src = signatureData;
            });
            
            document.getElementById('clearSignatureBtn').addEventListener('click', function() {
                if (signatureCtx) {
                    signatureCtx.clearRect(0, 0, signatureCanvas.width, signatureCanvas.height);
                }
            });
            
            document.getElementById('uploadSignatureBtn').addEventListener('click', function() {
                alert('In a real app, this would allow uploading a signature image file.');
            });
            
            document.getElementById('signatureModalClose').addEventListener('click', function() {
                signatureModal.classList.remove('active');
            });
            
            document.getElementById('signatureCancelBtn').addEventListener('click', function() {
                signatureModal.classList.remove('active');
            });
        }

        // Initialize signature pad
        function initSignaturePad() {
            signatureCanvas = document.getElementById('signaturePad');
            signatureCanvas.width = signatureCanvas.offsetWidth;
            signatureCanvas.height = signatureCanvas.offsetHeight;
            signatureCtx = signatureCanvas.getContext('2d');
            signatureCtx.strokeStyle = '#000000';
            signatureCtx.lineWidth = 2;
            
            // Mouse events
            signatureCanvas.addEventListener('mousedown', startDrawing);
            signatureCanvas.addEventListener('mousemove', draw);
            signatureCanvas.addEventListener('mouseup', stopDrawing);
            signatureCanvas.addEventListener('mouseout', stopDrawing);
            
            // Touch events
            signatureCanvas.addEventListener('touchstart', startDrawing);
            signatureCanvas.addEventListener('touchmove', draw);
            signatureCanvas.addEventListener('touchend', stopDrawing);
            
            function startDrawing(e) {
                isDrawing = true;
                const pos = getPosition(e);
                signatureCtx.beginPath();
                signatureCtx.moveTo(pos.x, pos.y);
                e.preventDefault();
            }
            
            function draw(e) {
                if (!isDrawing) return;
                
                const pos = getPosition(e);
                signatureCtx.lineTo(pos.x, pos.y);
                signatureCtx.stroke();
                e.preventDefault();
            }
            
            function stopDrawing() {
                isDrawing = false;
            }
            
            function getPosition(e) {
                let x, y;
                
                if (e.type.includes('touch')) {
                    const rect = signatureCanvas.getBoundingClientRect();
                    x = e.touches[0].clientX - rect.left;
                    y = e.touches[0].clientY - rect.top;
                } else {
                    x = e.offsetX;
                    y = e.offsetY;
                }
                
                return { x, y };
            }
        }

        // Show status message
        function showStatus(message, type) {
            statusMessage.textContent = message;
            statusMessage.className = 'status-message';
            statusMessage.classList.add(type);
            
            // Hide after 5 seconds
            setTimeout(() => {
                statusMessage.className = 'status-message';
            }, 5000);
        }
    </script>
</body>
</html>
